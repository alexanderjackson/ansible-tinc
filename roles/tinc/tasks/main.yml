---

- name: ensure custom facts directory exists
  file: >
    path=/etc/ansible/facts.d
    recurse=yes
    state=directory

- name: open ufw firewall for "ssh 655 8006" if ufw exists
  shell: >
    if which ufw >/dev/null ; then for i in ssh 655 8006 ; do ufw allow $i ; done ; else echo ufw not installed ; fi

- name: reload ansible_local
  setup: filter=ansible_local

- name: install tinc
  apt: >
    name=tinc
    state=present
    update_cache=yes
    cache_valid_time=3600

- name: delete current tinc config
  command: >
    rm -rf /etc/tinc

- name: ensure tinc vpn name directory exists
  file: >
    path=/etc/tinc/{{ vpn_name }}/hosts
    recurse=True
    state=directory

- name: ensure tinc.conf exists for vpn name
  template: >
    src=tinc.conf.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc.conf

- name: get public ip
  shell: wget -qO- http://ipecho.net/plain ; echo
  register: host_ip

- name: ensure tinc address is properly set in tinc host file
  lineinfile: >
    dest=/etc/tinc/{{ vpn_name }}/hosts/{{ ansible_hostname }}
    line="Address = {{ host_ip.stdout }}"
    create=yes

- name: create /etc/tinc/nets.boot file from template
  template: >
    src=nets.boot.j2
    dest=/etc/tinc/nets.boot

- name: create tinc private key
  shell: tincd -n {{ vpn_name }} -K4096
  args:
    creates: /etc/tinc/{{ vpn_name }}/rsa_key.priv

- name: create tinc-up file
  template: >
    src=tinc-up.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-up
    mode=0755

- name: create tinc-down file
  template: >
    src=tinc-down.j2
    dest=/etc/tinc/{{ vpn_name }}/tinc-down
    mode=0755

- name: fetch tinc hosts file after private key creation
  fetch: >
    src=/etc/tinc/{{ vpn_name }}/hosts/{{ ansible_hostname }}
    dest=fetch/{{ ansible_hostname }}
    flat=yes

- name: ensure the fetched tinc hosts file are place on each server
  file: >
    src={{ item }}
    dest=/etc/tinc/{{vpn_name }}/hosts/{{ item }}
  with_fileglob:
    - fetch/*

- name: sync the fetched hosts files on each host
  synchronize: >
    src=fetch/
    dest=/etc/tinc/{{ vpn_name }}/hosts/

- replace:
    dest=/etc/init.d/tinc
    regexp='^# Default-Stop.*'
    replace='# Default-Stop:'
    backup=yes

- name: tinc remove
  command: >
    insserv -r tinc

- name: tinc add
  command: >
    insserv -f tinc

- name: renice tincd
  cron: >
    name="renice tincd" job="renice -n -10 $(pidof tincd) > /dev/null 2>&1"

- name: restart tinc
  command: >
    service tinc restart

- name: ensure hosts file is the up to date
  template: >
    src=hosts.j2
    dest=/etc/hosts
